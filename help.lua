function PrintHelp()
print("almanac - version: "..VERSION)
print("author: Colum Paget (colums.projects@gmail.com)")
print("licence: GPLv3")
print()
print("usage:  almanac [options] [calendar]...")
print()
print("almanac can pull calendar feeds from webcalendars using the google calendar api, meetup api, ical format, or xcal rss format")
print("google and meetup calendars are identified in the following format:")
print("g:calendar@hackercons.org          - a google calendar")
print("m:fizzPOP-Birminghams-Makerspace   - a meetup calendar")
print()
print("The default calendar is stored on disk, and is referred to as 'a:default',  and if no calendar is supplied then it will be displayed by default")
print("ical and rss webcalendars are identified by a url as normal.")
print("Events can also be uploaded to google calendars that the user has permission for. If pushing events to a user's google calendar, or displaying events from it, this can be specified as 'g:primary'")
print()
print("options:")
print("   -h <n>      show events for the next 'n' hours. The 'n' argument is optional, if missing 1 day will be assumed")
print("   -hour <n>   show events for the next 'n' hours. The 'n' argument is optional, if missing 1 day will be assumed")
print("   -d <n>      show events for the next 'n' days.  The 'n' argument is optional, if missing 1 day will be assumed")
print("   -day  <n>   show events for the next 'n' days.  The 'n' argument is optional, if missing 1 day will be assumed")
print("   -days <n>   show events for the next 'n' days.  The 'n' argument is optional, if missing 1 day will be assumed")
print("   -w <n>      show events for the next 'n' weeks. The 'n' argument is optional, if missing 1 week will be assumed")
print("   -week <n>   show events for the next 'n' weeks. The 'n' argument is optional, if missing 1 week will be assumed")
print("   -m <n>      show events for the next 'n' months. The 'n' argument is optional, if missing 1 month will be assumed")
print("   -month <n>  show events for the next 'n' months. The 'n' argument is optional, if missing 1 month will be assumed")
print("   -y <n>      show events for the next 'n' years. The 'n' argument is optional, if missing 1 year will be assumed")
print("   -year <n>   show events for the next 'n' years. The 'n' argument is optional, if missing 1 year will be assumed")
print("   -at <loc>   show events at location 'loc'")
print("   -where <loc>     show events at location 'loc'")
print("   -location <loc>  show events at location 'loc'")
print("   -hide <pattern>  hide events whose title matches fnmatch/shell style pattern 'pattern'")
print("   -show <pattern>  show only events whose title matches fnmatch/shell style pattern 'pattern'")
print("   -detail     print event description/details")
print("   -details    print event description/details")
print("   -show-url   print event with event connect url (for Zoom or Teams meetings) on a line below")
print("   -old        show events that are in the past")
print("   -import <url>  Import events from specified URL (usually an ical file) into calendar")
print("   -import-email <url>  Import events from ical attachments within an email file at the specified URL into calendar")
print("   -persist    don't exit, but print out events in a loop. This can be used to create an updating window that displays upcoming events.")
print("   -convert <url>  Output events from specified URL (usually an ical file) in output format set with '-of'")
print("   -convert-email <url>  Output events from ical attachments within an email file at the specified URL in format set with '-of'")
print("   -lfmt <format string>          line format for ansi output (see 'display formats' for details of title strings)")
print("   -xt <title string>             when -persist is used, also set the xterm title to be <title string> (see 'display formats' for details of title strings)")
print("   -xtitle <title string>         when -persist is used, also set the xterm title to be <title string> (see 'display formats' for details of title strings)")
print("   -xterm-title <title string>    when -persist is used, also set the xterm title to be <title string> (see 'display formats' for details of title strings)")
print("   -of <fmt>   specify format to output. '<fmt> will be one of 'csv', 'ical', 'sgical', 'txt' or 'ansi'. Default is 'ansi'. See 'Output Formats' below for more details")
print("   -refresh <len>                 when in persist mode, update with this frequency, where 'len' is a number postfixed by 'm' 'h' 'd' or 'w' for 'minutes', 'hours', 'days' or 'weeks'. e.g. '2d' two days, '30m' thiry minutes. Default 2m.")
print("   -maxlen <len>     When importing calendars set the max length of an event to <len> where len is a number postfixed by 'm' 'h' 'd' or 'w' for 'minutes', 'hours', 'days' or 'weeks'. e.g. '2d' two days, '30m' thiry minutes.")
print("   -u         Terminal supports unicode up to code 0x8000")
print("   -unicode   Terminal supports unicode up to code 0x8000")
print("   -u2        Terminal supports unicode up to code 0x8000")
print("   -unicode2  Terminal supports unicode up to code 0x10000")
print("   -debug     Print debug output")
print("   -?          This help")
print("   -h          This help")
print("   -help       This help")
print("   --help      This help")
print()
print("ADD EVENTS")
print("The following options all relate to inserting an event into an almanac or a google calendar. if calendar is specified then the default almanac calendar (a:default) is assumed. You can instead use the user's primary google calendar by specifiying 'g:primary'")
print("   -add <title>           add an event with specified title using the destination calendars default privacy setting")
print("   -addpub <title>        add a public event to a google calendar with specified title")
print("   -addpriv <title>       add a private event to a google calendar with specified title")
print("   -start <datetime>      start time of event (see 'time formats' below)")
print("   -end <datetime>        end time of event (see 'time formats' below)")
print("   -at <location>         location of event")
print("   -where <location>      location of event")
print("   -location <location>   location of event")
print("   -import <path>         import events from a .ical/.ics file and upload them to a calendar")
print()
print("example: almanac.lua -add \"dental appointment\" -start \"2020/01/23\"")
print()
print("TIME FORMATS")
print("almanac accepts the following date/time formats:")
print("")
print("HH:MM                 -  4 digit time, date is 'today'")
print("HH:MM:SS              -  6 digit time, date is 'today'")
print("YYYYMMDD              -  8 digit date, e.g. 19890101")
print("YY?MM?DD              -  6 digit date with any separator character OTHER THAN ':' (so ? can be anything, e.g. 89/01/01)")
print("YYYY?MM?DD            -  8 digit date with any separator character (so ? can be anything, e.g. 1989:01:01)")
print("YYYYMMDDTHHMM         -  8 digit date with time e.g. 19890101T11:40:00")
print("YYYYMMDDTHHMMSS       -  8 digit date with time e.g. 19890101T11:40:00")
print("YYYYMMDDTHHMMSSZ      -  8 digit date with time e.g. 19890101T11:40:00Z")
print("YYYY?MM?DDTHH?MM?SS   -  8 digit date with time e.g. 1989/01/01T11:40:00")
print("")
print("Currently the following *discouraged* formats are also supported. Almanac doesn't have locale support yet and these support UK/international date format")
print("")
print("DD?MM?YYYY            -  8 digit date with any separator character (so ? can be anything, e.g. 1989:01:01)")
print("DD?MM?YYYYTHH?MM?SS   -  8 digit date with time e.g. 1989/01/01T11:40:00")
print("")
print("OUTPUT FORMATS")
print("the '-of' option can specify one of the following output formats:")
print("csv     output comma-seperated-values suitable for reading into a spreadsheet.")
print("txt     output plain text format.")
print("ical    output ical/ics format.")
print("sgical  output file format sutable for Sanjay Ghemawat's unix ical application.")
print("ansi    output text with ANSI color formatting")
print()
print("DISPLAY FORMATS")
print("In the default mode, ansi display mode, you can specify the line-by-line output format by using a combination of color identifiers and data identifiers.")
print("data identifiers: these are strings that will be replaced by the specified value")
print("$(title)          event title/summary")
print("$(date)           start date in Y/m/d format")
print("$(time)           start time in H:M:S format")
print("$(day)            numeric day of month")
print("$(month)          numeric month of year")
print("$(Year)           year in 4-digit format")
print("$(year)           year in 2-digit format")
print("$(monthname)      Full name of month ('Feburary')")
print("$(monthnick)      Short name of month ('Feb')")
print("$(dayname)        full name of day (Monday, Tuesday, Wednesday...)")
print("$(daynick)        short name of day (Mon, Tues, Wed...)")
print("$(dayid)          like dayname, except including 'today' and 'tomorrow'")
print("$(dayid_color)    like dayid, but today will be in ansi red, tomorrow in ansi yellow")
print("$(daynick_color)  like daynick, but today will be in ansi red, tomorrow in ansi yellow, although they will still have daynick names")
print("$(location)       event location")
print("$(duration)       event duration")
print()
print("color identifiers: format strings that specifier colors")
print("~0      reset colors")
print("~r      red")
print("~g      green")
print("~b      blue")
print("~y      yellow")
print("~m      magenta")
print("~c      cyan")
print("~w      white")
print("~n      noir (black)")
print("~e      bold (emphasis)")
print("default display format is:  ~c$(dayid_color)~0 $(date) $(time_color) $(duration) ~e~m$(title)~0 $(location)")
print()
print("EXAMPLES")
print()
print("display default calendar")
print("	almanac.lua a:default")
print()
print("display user's primary google calendar")
print("	almanac.lua g:primary")
print()
print("display web calendar")
print("	almanac.lua https://launchlibrary.net/1.3/calendar/next/100")
print()
print("output web calendar in format suitable for Sanjay Ghemawat's 'ical' program, and redirect to a file that ical can import") 
print("	almanac.lua -of sgical https://launchlibrary.net/1.3/calendar/next/100 > launches.calendar")
print()
print("output web calendar in CSV format suitable spreadsheet import") 
print("	almanac.lua -of csv https://launchlibrary.net/1.3/calendar/next/100 > launches.csv")
print()
print("add event to almanac calendar")
print("	almanac.lua -add \"dental appointment\" -start \"2020/01/23\"")
print("	almanac.lua a:default -add \"dental appointment\" -start \"2020/01/23\"")
print()
print("add event to google calendar")
print("	almanac.lua g:primary -add \"dental appointment\" -start \"2020/01/23\"")
print("	almanac.lua g:me@mydomain.org -add \"next meeting\" -start \"2020/01/23\"")
print()
print("import an ical url into local calendar") 
print("	almanac.lua a:default -import https://launchlibrary.net/1.3/calendar/next/100")
print()
print("import all ical attachments in an email file into local calendar") 
print("	almanac.lua a:default -import-email mailfile.mail")
print()

end


